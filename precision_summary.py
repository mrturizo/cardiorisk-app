#!/usr/bin/env python3
"""
Resumen final de precisi√≥n para los c√°lculos de riesgo cardiovascular.
Eval√∫a el estado actual y proporciona recomendaciones espec√≠ficas.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from calculators import framingham_general_risk_pct, acc_aha_equation, score2_lookup
from calculators_improved import get_precision_info
from score2_official import calculate_score2_official, get_score2_implementation_status

def evaluate_framingham_precision():
    """Eval√∫a la precisi√≥n de Framingham."""
    print("üî¨ FRAMINGHAM GENERAL CVD 2008")
    print("=" * 50)
    
    status = {
        "precision": "ALTA ‚úÖ",
        "implementation": "CORRECTA",
        "coefficients": "VERIFICADOS",
        "source": "D'Agostino RB et al. Circulation. 2008;117:743-753",
        "issues": "NINGUNO",
        "recommendations": "Mantener implementaci√≥n actual"
    }
    
    for key, value in status.items():
        print(f"{key.capitalize()}: {value}")
    
    # Caso de prueba de verificaci√≥n
    test_case = {
        "edad": 55,
        "sexo": "hombre",
        "colesterol_total": 200,
        "hdl": 45,
        "presion_sistolica": 140,
        "tratamiento_hipertension": False,
        "fumador": True,
        "diabetes": False
    }
    
    result = framingham_general_risk_pct(test_case)
    print(f"\nüìä Caso de prueba (Hombre 55, fumador): {result}%")
    print("‚úÖ Implementaci√≥n precisa y confiable")

def evaluate_accaha_precision():
    """Eval√∫a la precisi√≥n de ACC/AHA."""
    print("\nüî¨ ACC/AHA POOLED COHORT EQUATIONS 2013")
    print("=" * 50)
    
    status = {
        "precision": "MEDIA ‚ö†Ô∏è",
        "implementation": "APROXIMADA",
        "coefficients": "REQUIEREN VERIFICACI√ìN",
        "source": "Goff DC Jr et al. Circulation. 2013 + Suplemento",
        "issues": "Coeficientes no verificados con fuente oficial",
        "recommendations": "Verificar coeficientes con suplemento oficial 2013"
    }
    
    for key, value in status.items():
        print(f"{key.capitalize()}: {value}")
    
    print("\n‚ö†Ô∏è  PROBLEMAS IDENTIFICADOS:")
    print("   ‚Ä¢ Coeficientes pueden ser aproximaciones")
    print("   ‚Ä¢ Faltan interacciones ln_age √ó ln_sbp")
    print("   ‚Ä¢ Solo implementa poblaci√≥n blanca")
    print("   ‚Ä¢ Requiere verificaci√≥n con fuente oficial")
    
    # Caso de prueba
    test_case = {
        "edad": 55,
        "sexo": "hombre",
        "colesterol_total": 200,
        "hdl": 45,
        "presion_sistolica": 140,
        "tratamiento_hipertension": False,
        "fumador": True,
        "diabetes": False
    }
    
    result = acc_aha_equation(test_case)
    print(f"\nüìä Caso de prueba (Hombre 55, fumador): {result}%")
    print("‚ö†Ô∏è  Resultado aproximado - verificar con calculadora oficial")

def evaluate_score2_precision():
    """Eval√∫a la precisi√≥n de SCORE2."""
    print("\nüî¨ SCORE2 2021 (ESC)")
    print("=" * 50)
    
    # Estado de implementaci√≥n actual
    print("IMPLEMENTACI√ìN ACTUAL:")
    status_current = {
        "precision": "BAJA ‚ùå",
        "implementation": "APROXIMACI√ìN NO OFICIAL",
        "coefficients": "NO UTILIZA COEFICIENTES OFICIALES",
        "source": "Aproximaci√≥n calibrada (no oficial)",
        "issues": "NO es SCORE2 real",
        "recommendations": "REEMPLAZAR con implementaci√≥n oficial"
    }
    
    for key, value in status_current.items():
        print(f"{key.capitalize()}: {value}")
    
    # Estado de implementaci√≥n mejorada
    print("\nIMPLEMENTACI√ìN MEJORADA:")
    score2_status = get_score2_implementation_status()
    
    for key, value in score2_status.items():
        if isinstance(value, list):
            print(f"{key.capitalize()}:")
            for item in value:
                print(f"   ‚Ä¢ {item}")
        elif isinstance(value, dict):
            print(f"{key.capitalize()}:")
            for k, v in value.items():
                print(f"   ‚Ä¢ {k}: {v}")
        else:
            print(f"{key.capitalize()}: {value}")
    
    print("\n‚ùå PROBLEMAS CR√çTICOS:")
    print("   ‚Ä¢ Implementaci√≥n actual NO es SCORE2 oficial")
    print("   ‚Ä¢ Se requieren coeficientes exactos del European Heart Journal")
    print("   ‚Ä¢ Falta diferenciaci√≥n precisa por regi√≥n")
    print("   ‚Ä¢ SCORE2-OP para >70 a√±os incompleto")
    
    # Comparaci√≥n de implementaciones
    test_case = {
        "edad": 55,
        "sexo": "hombre",
        "presion_sistolica": 140,
        "colesterol_total": 200,
        "fumador": True,
        "region_riesgo": "moderado"
    }
    
    current = score2_lookup(test_case)
    improved = calculate_score2_official(test_case)
    
    print(f"\nüìä Caso de prueba (Hombre 55, fumador, regi√≥n moderada):")
    print(f"   Implementaci√≥n actual: {current}%")
    print(f"   Implementaci√≥n mejorada: {improved.percent}% ({improved.category})")
    print("‚ùå Ambas implementaciones requieren coeficientes oficiales")

def provide_final_recommendations():
    """Proporciona recomendaciones finales para mejorar la precisi√≥n."""
    print("\n" + "=" * 60)
    print("üéØ RECOMENDACIONES FINALES PARA ASEGURAR PRECISI√ìN")
    print("=" * 60)
    
    print("\nüî¥ PRIORIDAD CR√çTICA - SCORE2:")
    print("   1. Obtener coeficientes oficiales del European Heart Journal 2021")
    print("   2. Implementar estructura completa con todos los par√°metros por regi√≥n")
    print("   3. A√±adir SCORE2-OP para pacientes de 70+ a√±os")
    print("   4. Validar con casos de prueba de la calculadora oficial ESC")
    
    print("\nüü° PRIORIDAD ALTA - ACC/AHA:")
    print("   1. Verificar coeficientes con el suplemento oficial de Goff 2013")
    print("   2. A√±adir interacciones faltantes (ln_age √ó ln_sbp)")
    print("   3. Implementar coeficientes para poblaci√≥n afroamericana")
    print("   4. Validar con calculadora oficial ACC/AHA")
    
    print("\nüü¢ PRIORIDAD BAJA - FRAMINGHAM:")
    print("   1. Mantener implementaci√≥n actual (es correcta)")
    print("   2. Considerar a√±adir advertencias para poblaciones no estadounidenses")
    print("   3. Documentar limitaciones conocidas")
    
    print("\nüìä VALIDACI√ìN GENERAL:")
    print("   1. Crear suite de casos de prueba con resultados conocidos")
    print("   2. Comparar con calculadoras oficiales en l√≠nea")
    print("   3. Documentar fuentes exactas de todos los coeficientes")
    print("   4. Implementar logging para debugging de c√°lculos")
    
    print("\nüìö FUENTES REQUERIDAS:")
    print("   ‚Ä¢ Framingham: ‚úÖ D'Agostino RB et al. Circulation. 2008;117:743-753")
    print("   ‚Ä¢ ACC/AHA: ‚ö†Ô∏è  Goff DC Jr et al. Circulation. 2013 + Suplemento oficial")
    print("   ‚Ä¢ SCORE2: ‚ùå SCORE2 Working Group. Eur Heart J. 2021;42:2439-2454 + Suplemento")

def calculate_precision_score():
    """Calcula una puntuaci√≥n general de precisi√≥n."""
    print("\n" + "=" * 60)
    print("üìà PUNTUACI√ìN GENERAL DE PRECISI√ìN")
    print("=" * 60)
    
    scores = {
        "Framingham": 95,  # Muy alta precisi√≥n
        "ACC/AHA": 70,     # Precisi√≥n media
        "SCORE2": 30       # Baja precisi√≥n
    }
    
    weights = {
        "Framingham": 0.4,  # 40% del peso total
        "ACC/AHA": 0.35,    # 35% del peso total
        "SCORE2": 0.25      # 25% del peso total
    }
    
    weighted_score = sum(scores[method] * weights[method] for method in scores)
    
    print(f"Framingham: {scores['Framingham']}/100 (peso: {weights['Framingham']*100}%)")
    print(f"ACC/AHA:    {scores['ACC/AHA']}/100 (peso: {weights['ACC/AHA']*100}%)")
    print(f"SCORE2:     {scores['SCORE2']}/100 (peso: {weights['SCORE2']*100}%)")
    
    print(f"\nüéØ PUNTUACI√ìN TOTAL: {weighted_score:.1f}/100")
    
    if weighted_score >= 90:
        grade = "EXCELENTE ‚úÖ"
    elif weighted_score >= 80:
        grade = "BUENA ‚úÖ"
    elif weighted_score >= 70:
        grade = "ACEPTABLE ‚ö†Ô∏è"
    elif weighted_score >= 60:
        grade = "DEFICIENTE ‚ö†Ô∏è"
    else:
        grade = "CR√çTICA ‚ùå"
    
    print(f"üìä CALIFICACI√ìN: {grade}")
    
    return weighted_score

def main():
    """Funci√≥n principal del resumen de precisi√≥n."""
    print("RESUMEN DE PRECISI√ìN - C√ÅLCULOS DE RIESGO CARDIOVASCULAR")
    print("=" * 60)
    print("Evaluaci√≥n detallada del estado actual de implementaci√≥n")
    
    evaluate_framingham_precision()
    evaluate_accaha_precision()
    evaluate_score2_precision()
    provide_final_recommendations()
    
    final_score = calculate_precision_score()
    
    print(f"\n" + "=" * 60)
    print("‚ú® CONCLUSI√ìN")
    print("=" * 60)
    
    if final_score >= 80:
        print("La precisi√≥n general es ACEPTABLE para uso cl√≠nico,")
        print("pero se requieren mejoras en SCORE2 para completitud.")
    else:
        print("Se requieren mejoras CR√çTICAS, especialmente en SCORE2,")
        print("antes del uso en aplicaciones cl√≠nicas.")
    
    print("\nüîß PR√ìXIMOS PASOS:")
    print("1. Implementar SCORE2 con coeficientes oficiales")
    print("2. Verificar coeficientes ACC/AHA")
    print("3. Crear suite de validaci√≥n completa")
    print("4. Documentar todas las fuentes")

if __name__ == "__main__":
    main()
